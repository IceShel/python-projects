import pygame
import time
from random import shuffle,randint


grid =[]
grid.append([0,0,0,0,0,0,0,0,0])
grid.append([0,0,0,0,0,0,0,0,0])
grid.append([0,0,0,0,0,0,0,0,0])
grid.append([0,0,0,0,0,0,0,0,0])
grid.append([0,0,0,0,0,0,0,0,0])
grid.append([0,0,0,0,0,0,0,0,0])
grid.append([0,0,0,0,0,0,0,0,0])
grid.append([0,0,0,0,0,0,0,0,0])
grid.append([0,0,0,0,0,0,0,0,0])
numberList=[1,2,3,4,5,6,7,8,9]


pygame.init()
root=pygame.display.set_mode([600,600])
root.fill([255,255,255])
size_board=50
counter =0
font_style = pygame.font.SysFont(None, 50)

def checkGrid(grid_f):
    for row in range(0,9):
        for col in range(0,9):
            if grid_f[row][col]==0:
                return False
    return True


def start_game():
   i=0
   line_no=1
   while i <=size_board*9:
       i+=size_board
       pygame.draw.line(root,[0,0,0],[i,size_board],[i,size_board*10])
       if line_no % 3 ==0 and i != size_board:
           i+=size_board
           pygame.draw.line(root, [0, 0, 0], [i, size_board], [i, size_board*10],4)
           i-=size_board
       if i == size_board:
           pygame.draw.line(root, [0, 0, 0], [i, size_board], [i, size_board*10], 4)
       line_no += 1

   i=0
   line_no=1
   while i<=size_board*9:
       i+=size_board
       pygame.draw.line(root,[0,0,0],[size_board,i],[size_board*10,i])
       if line_no % 3 == 0 and i != size_board:
           i += size_board
           pygame.draw.line(root, [0, 0, 0], [size_board, i], [size_board*10, i],4)
           i -= size_board
       if i == size_board:
            pygame.draw.line(root, [0, 0, 0], [size_board, i], [size_board*10, i], 4)
       line_no+=1
   pygame.display.update()

def solveGrid(grid):
  global counter
  #Find next empty cell
  for i in range(0,81):
    row=i//9
    col=i%9
    if grid[row][col]==0:
      for value in range (1,10):
        #Check that this value has not already be used on this row
        if not(value in grid[row]):
          #Check that this value has not already be used on this column
          if not value in (grid[0][col],grid[1][col],grid[2][col],grid[3][col],grid[4][col],grid[5][col],grid[6][col],grid[7][col],grid[8][col]):
            #Identify which of the 9 squares we are working on
            square=[]
            if row<3:
              if col<3:
                square=[grid[i][0:3] for i in range(0,3)]
              elif col<6:
                square=[grid[i][3:6] for i in range(0,3)]
              else:
                square=[grid[i][6:9] for i in range(0,3)]
            elif row<6:
              if col<3:
                square=[grid[i][0:3] for i in range(3,6)]
              elif col<6:
                square=[grid[i][3:6] for i in range(3,6)]
              else:
                square=[grid[i][6:9] for i in range(3,6)]
            else:
              if col<3:
                square=[grid[i][0:3] for i in range(6,9)]
              elif col<6:
                square=[grid[i][3:6] for i in range(6,9)]
              else:
                square=[grid[i][6:9] for i in range(6,9)]
            #Check that this value has not already be used on this 3x3 square
            if not value in (square[0] + square[1] + square[2]):
              grid[row][col]=value
              if checkGrid(grid):
                counter+=1
                break
              else:
                if solveGrid(grid):
                  return True
      break
  # grid[row][col]=0

def fillGrid(grid):
  global counter
  #Find next empty cell
  for i in range(0,81):
    row=i//9
    col=i%9
    if grid[row][col]==0:
      shuffle(numberList)
      for value in numberList:
        #Check that this value has not already be used on this row
        if not(value in grid[row]):
          #Check that this value has not already be used on this column
          if not value in (grid[0][col],grid[1][col],grid[2][col],grid[3][col],grid[4][col],grid[5][col],grid[6][col],grid[7][col],grid[8][col]):
            #Identify which of the 9 squares we are working on
            square=[]
            if row<3:
              if col<3:
                square=[grid[i][0:3] for i in range(0,3)]
              elif col<6:
                square=[grid[i][3:6] for i in range(0,3)]
              else:
                square=[grid[i][6:9] for i in range(0,3)]
            elif row<6:
              if col<3:
                square=[grid[i][0:3] for i in range(3,6)]
              elif col<6:
                square=[grid[i][3:6] for i in range(3,6)]
              else:
                square=[grid[i][6:9] for i in range(3,6)]
            else:
              if col<3:
                square=[grid[i][0:3] for i in range(6,9)]
              elif col<6:
                square=[grid[i][3:6] for i in range(6,9)]
              else:
                square=[grid[i][6:9] for i in range(6,9)]
            #Check that this value has not already be used on this 3x3 square
            if not value in (square[0] + square[1] + square[2]):
              grid[row][col]=value
              if checkGrid(grid):
                return True
              else:
                if fillGrid(grid):
                  return True
      break
  grid[row][col]=0

fillGrid(grid)
sloved_grid=[]
for r in range(0, 9):
    sloved_grid.append([])
    for c in range(0, 9):
        sloved_grid[r].append(grid[r][c])



def draw_numbers(grid_f):
    for i in range(0,9):
        for j in range(0,9):
            if grid_f[i][j]!=0:
                mesg = font_style.render(str(grid_f[i][j]), True, [0, 0, 0])
                root.blit(mesg, [(size_board*i)+size_board+15, (size_board*j)+size_board+15])



start_game()
attempts = 5
counter = 1
while attempts > 0:
    # Select a random cell that is not already empty
    row = randint(0, 8)
    col = randint(0, 8)
    while grid[row][col] == 0:
        row = randint(0, 8)
        col = randint(0, 8)
    # Remember its cell value in case we need to put it back
    backup = grid[row][col]
    grid[row][col] = 0

    # Take a full copy of the grid
    copyGrid = []
    for r in range(0, 9):
        copyGrid.append([])
        for c in range(0, 9):
            copyGrid[r].append(grid[r][c])

    # Count the number of solutions that this grid has (using a backtracking approach implemented in the solveGrid() function)
    counter = 0
    solveGrid(copyGrid)
    # If the number of solution is different from 1 then we need to cancel the change by putting the value we took away back in the grid
    if counter != 1:
        grid[row][col] = backup
        # We could stop here, but we can also have another attempt with a different cell just to try to remove more numbers
        attempts -= 1
draw_numbers(grid)
pygame.display.update()
while True:
    for event in pygame.event.get():
        if event.type==pygame.QUIT:
            pygame.quit()
            quit()
        if event.type==pygame.KEYDOWN:
            if event.key == pygame.K_s:
                solveGrid(grid)
                draw_numbers(grid)
                pygame.display.update()
            if event.key == pygame.K_r:
                root.fill([255,255,255])
                start_game()
                grid = []
                grid.append([0, 0, 0, 0, 0, 0, 0, 0, 0])
                grid.append([0, 0, 0, 0, 0, 0, 0, 0, 0])
                grid.append([0, 0, 0, 0, 0, 0, 0, 0, 0])
                grid.append([0, 0, 0, 0, 0, 0, 0, 0, 0])
                grid.append([0, 0, 0, 0, 0, 0, 0, 0, 0])
                grid.append([0, 0, 0, 0, 0, 0, 0, 0, 0])
                grid.append([0, 0, 0, 0, 0, 0, 0, 0, 0])
                grid.append([0, 0, 0, 0, 0, 0, 0, 0, 0])
                grid.append([0, 0, 0, 0, 0, 0, 0, 0, 0])
                fillGrid(grid)
                attempts = 5
                counter = 1
                while attempts > 0:
                    # Select a random cell that is not already empty
                    row = randint(0, 8)
                    col = randint(0, 8)
                    while grid[row][col] == 0:
                        row = randint(0, 8)
                        col = randint(0, 8)
                    # Remember its cell value in case we need to put it back
                    backup = grid[row][col]
                    grid[row][col] = 0

                    # Take a full copy of the grid
                    copyGrid = []
                    for r in range(0, 9):
                        copyGrid.append([])
                        for c in range(0, 9):
                            copyGrid[r].append(grid[r][c])

                    # Count the number of solutions that this grid has (using a backtracking approach implemented in the solveGrid() function)
                    counter = 0
                    solveGrid(copyGrid)
                    # If the number of solution is different from 1 then we need to cancel the change by putting the value we took away back in the grid
                    if counter != 1:
                        grid[row][col] = backup
                        # We could stop here, but we can also have another attempt with a different cell just to try to remove more numbers
                        attempts -= 1
                draw_numbers(grid)
                pygame.display.update()



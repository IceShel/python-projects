import pygame
import math
pygame.init()
root = pygame.display.set_mode([600,600])
board = [[None] * 3, [None] * 3,[None] * 3]
chance=1 #1 human 0 bot
new_board= [[None] * 3, [None] * 3,[None] * 3]
max_min=None
draw=None
winner=None
counter=0
def start_game():
    board=[[None]*3,[None]*3,[None]*3]
    chance=1
    root.fill([255,255,255])
    #vertical lines
    pygame.draw.line(root,[0,0,0],[200,0],[200,600],5)
    pygame.draw.line(root, [0, 0, 0], [400, 0], [400, 600], 5)
    #horizontal lines
    pygame.draw.line(root, [0, 0, 0], [0,200],[600,200],5)
    pygame.draw.line(root, [0, 0, 0], [0, 400], [600, 400],5)
    pygame.display.update()
    input_player(chance)
def input_player(chance):
    input_=True
    while input_:
        if chance==0:
            counter=0
            Best_Move(board)
            input_=False
        for event in pygame.event.get():
            if event.type == pygame.MOUSEBUTTONDOWN:
                mouse_pos = pygame.mouse.get_pos()
                input_=False
                draw_(mouse_pos,chance)
            if event.type==pygame.QUIT:
                quit()
def draw_(mouse_pos=None,chance=None,list=None):
    row=None
    col=None
    # print(mouse_pos)
    # print(list)
    if mouse_pos==None and list !=[]:
       row=list[0]
       col =list[1]
    if list==[]:
        # print("over")
        return False
    # print(mouse_pos)
    # print(list)
    if mouse_pos!=None:
        if mouse_pos[0] > 0  and mouse_pos[0]< 200:
            row=0
        if mouse_pos[0] > 200  and mouse_pos[0]< 400:
            row=1
        if mouse_pos[0] > 400  and mouse_pos[0]< 600:
            row=2


        if mouse_pos[1] > 0 and mouse_pos[1] < 200:
            col = 0
        if mouse_pos[1] > 200 and mouse_pos[1] < 400:
            col = 1
        if mouse_pos[1] > 400 and mouse_pos[1] < 600:
            col = 2



    if chance==1 and board[row][col]==None:
        pygame.draw.line(root, [0, 0, 0], [row*200, col*200],[190+row*200, 190+col*200],5)
        pygame.draw.line(root,[0,0,0], [row*200+190,col*200],[row*200,col*200+190],5)
        board[row][col]="x"
        chance=0
        pygame.display.update()
    elif chance == 0  and board[row][col]==None:
        # print("inside")
        pygame.draw.circle(root,[0,0,0],[row*200+100,col*200+100],65,5)
        board[row][col]="o"
        chance=1
        pygame.display.update()
    check_win(board,chance)

def Best_Move(board):
    best_score=-math.inf
    best_move=[]
    for i in range(0,3):
        for j in range(0,3):
            if board[i][j]==None:
                # print(i,j)
                # print(board)
                board[i][j]="o"
                score =minimax(board,False,5)
                # print(score,"best move")
                # print(board)
                board[i][j] = None
                if score >best_score:
                    best_score=score
                    best_move=[i,j]
                # print(best_move)
                # print(best_score,"best score best move")
    # print("drawing")
    draw_(list=best_move,chance=0)
def minimax(board,ismax,depth):
    global counter
    counter+=1
    print(counter)
    state=check_win(board,chance,True)
    if state !=2:
        return state
    if ismax:
        best_score=-math.inf
        for i in range(0, 3):
            for j in range(0, 3):
                if board[i][j] == None:
                    # print(i, j)
                    # print(board)
                    board[i][j] = "o"
                    score = minimax(board, False, depth-1)
                    # print(board)549945
                    board[i][j] = None
                    if score > best_score:
                        best_score = score
                    # print(best_score,"is true")
        return best_score
    else:
        best_score = math.inf
        for i in range(0, 3):
            for j in range(0, 3):
                if board[i][j] == None:
                    # print(i, j)
                    # print(board)
                    board[i][j] = "x"
                    score = minimax(board, True, depth-1)
                    board[i][j]=None
                    # print(board)
                    board[i][j] = None
                    if score < best_score:
                        best_score = score
                    # print(best_score,"is false")
        return best_score

def check_win(board,chance,bool1=False):
    winner=None
    draw=None
    # if bool1==False:
    #     if chance==0:
    #         chance=1
    #     if chance==1:
    #         chance=0

    # checking for winning rows
    for row in range(0, 3):
        if ((board[row][0] == board[row][1] == board[row][2]) and (board[row][0] is not None)):
            winner = board[row][0]
            break

    # checking for winning columns
    for col in range(0, 3):
        if ((board[0][col] == board[1][col] == board[2][col]) and (board[0][col] is not None)):
            winner = board[0][col]
            break

    # check for diagonal winners
    if (board[0][0] == board[1][1] == board[2][2]) and (board[0][0] is not None):
        # game won diagonally left to right
        winner = board[0][0]

    if (board[0][2] == board[1][1] == board[2][0]) and (board[0][2] is not None):
        # game won diagonally right to left
        winner = board[0][2]

    if (all([all(row) for row in board]) and winner is None):
        draw = True
    if winner==None and draw == None and bool1==False:
        input_player(chance)
    if (winner!=None or draw != None) and bool1==False:
        print("winner is",winner)
        print(draw)
    if bool1 == True:
        if winner==None and draw == None and bool1==True:
            return 2
        if winner == "o":
            return 1
        if winner == "x":
            return -1
        if draw == True:
            return 0

start_game()
